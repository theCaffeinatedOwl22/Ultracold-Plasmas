function [s] = fieldForQuadrupoleConfig(zRange,pRange,numZPts,numPPts,amps)
%% Program Notes

    % This program calculates the magnetic field produced by an array of current
    % loops in the anti-Helmholtz configuration, which describes the quadrupole
    % magnetic fields we use in the experiment.
    
    % I wrote a function to calculate the magnetic field from a single current loop of given
    % radius, current direction, and position along symmetry axis. This program calls that
    % function to obtain the field generated by each individual loop, and then obtains the total quadrupole magnetic
    % field by superimposing the fields from all coils.
    
    % Inputs:
        % zRange (1x2 double): This contains the range of z-positions that the magnetic field will be calculated for.
        % The first element is the lower part of the range and the second element is the maximum of the range. Note that
        % zRange(2)>zRange(1), otherwise you'll get an error. All positions should be specified in mm.
        
        % pRange (1x2 double): Exactly the same description as zRange, except that it applies to the radial vector
        % instead. Note that you are able to plot the fields for negative p, despite the fact that p technically has to
        % be greater than zero. The single-loop function only considers the absolute value of p values. Negative p
        % values should be used for plotting purposes only.
        
        % numZPts (1x1 double): The number of points to use in the array of z-positions. The range of z-positions is
        % specified above, so this parameter essentially sets the spacing between adjacent points.
        
        % numPPts (1x1 double): Same comment as for 'numZPts'.
        
    % Outputs:
        % s (struct): Contains various vectors/matrices of interest. All positions are recorded in mm and all fields are
        % recorded in G. Please see the end of this function for more details on what is contained within 's'.
    
%% Define current loop configuration

% This defines the possible z-positions. The distance bewteen the inner-most current
% loops is 7 cm. The diameter of each current loop is 4 mm, and therefore there are 9 current
% loops wrapped adjacent to each other. There are 7 layers of coil wraps. The current
% loops are wrapped around a cylindrial part of the chamber with diameter 2.8 cm.
% Thus, the radius of the inner-most current loop is 1.4 cm plus half the diameter.

numWraps = 9;   % calculate relevant z-positions of the coils.
wireDiameter = 4;   % units: mm
coilSpacing = 70;    % units: mm
coilRadius = 14;    % units: mm

zPos = zeros(1,numWraps);
for ii = 1:numWraps
    zPos(ii) = coilSpacing/2+wireDiameter*(ii-.5);    % in mm
end
zPos = [-zPos zPos];    % the coils are symmetrically placed around z=0

numLayers = 7;  % specify coil radii, which depends on which layer the coil belongs to
radii = zeros(1,numLayers);
for ii = 1:length(radii)
    radii(ii) = coilRadius+wireDiameter*(ii-.5);
end

[zPos,radii] = meshgrid(zPos,radii);    % ensure that each z-position has a corresponding coil radius
zPos = zPos(:);
radii = radii(:);

pol = ones(size(zPos)); % assign current direction. Left set of loops has one current, right set of loops has the opposite
pol(logical(zPos>0)) = pol(logical(zPos>0)).*-1;

zForPlot = linspace(zRange(1),zRange(2),numZPts);   % generate position vectors according to user specification
pForPlot = linspace(pRange(1),pRange(2),numPPts);   % again, all length units in mm

[zForMesh,pForMesh] = meshgrid(zForPlot,pForPlot);


%% Sum over each current loop

BzSum = zeros(length(pForMesh),length(zForMesh));   % initialize matrices for field calculations
BpSum = zeros(length(pForMesh),length(zForMesh));

u0 = pi*4e-7;   % magnetic permeability of free space in SI units

for ii = 1:length(radii)    % iterate through each current loop
    zDimUnits = zForMesh./radii(ii);    % convert positions to dimensionless units because that's what function uses
    pDimUnits = abs(pForMesh./radii(ii));
    zPosDimUnits = zPos(ii)/radii(ii);
    
    [Bp, Bz] = fieldFromSingleCurrentLoop(zDimUnits,pDimUnits,zPosDimUnits,pol(ii));
    BpSum = BpSum+Bp.*u0.*amps./radii(ii).*1e4.*1e3;    % 1e3 converts coil radius from mm to m
    BzSum = BzSum+Bz.*u0.*amps./radii(ii).*1e4.*1e3;    % 1e4 converts T to G
    
end

Bmag = sqrt(BpSum.^2+BzSum.^2); % magnetic field strength in G

%% Output information into structure
s.zInMM = zForPlot; % all distances in mm, all fields in G
s.pInMM = pForPlot; % contains vector of positions on p-axis
s.zMeshMM = zForMesh;   % meshed positions
s.pMeshMM = pForMesh;

s.coilZPos = zPos;  % record current loop conditions that fields were derived for
s.coilRadii = radii; 
s.pol = pol;

s.Bp = BpSum;   % magnetic field along rho axis as a function of rho and z
s.Bz = BzSum;   % magnetic field along symmetry axis as a function of rho and z
s.Bmag = Bmag;  % magnitude of field in G as a function of rho and z

end